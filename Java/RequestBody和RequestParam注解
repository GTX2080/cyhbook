@requestBody注解的使用

@RequestBody这个一般处理的是在ajax请求中声明contentType: “application/json; charset=utf-8”时候。也就是json数据格式或者 xml 数据格式1、@requestBody注解常用来处理content-type不是默认的application/x-www-form-urlcoded编码的内容，比如说：application/json或者是application/xml等。一般情况下来说常用其来处理application/json类型。

2、通过@requestBody可以将请求体中的JSON字符串绑定到相应的bean上，当然，也可以将其分别绑定到对应的字符串上。
　　　　例如说以下情况：
　　　　$.ajax({
　　　　　　　　url:”/login”,
　　　　　　　　type:”POST”,
　　　　　　　　data:’{“userName”:”admin”,”pwd”,”admin123”}’,
　　　　　　　　content-type:”application/json charset=utf-8”,
　　　　　　　　success:function(data){
　　　　　　　　　　alert(“request success ! “);
　　　　　　　　}});

@requestMapping(“/login”)
public void login(@requestBody String userName,@requestBody String pwd){
　　　　　　System.out.println(userName+” ：”+pwd);
　　　　}
　　　　这种情况是将JSON字符串中的两个变量的值分别赋予了两个字符串，但是呢假如我有一个User类，拥有如下字段：
　　　　　　String userName; String pwd;
　　　　那么上述参数可以改为以下形式：@requestBody User user 这种形式会将JSON字符串中的值赋予user中对应的属性上
　　　　需要注意的是，JSON字符串中的key必须对应user中的属性名，否则是请求不过去的。

3、特殊情况 @requestBody也可以用来处理content-type类型为application/x-www-form-urlcoded的内容，只不过这种方式
　　　　不是很常用，在处理这类请求的时候，@requestBody会将处理结果放到一个MultiValueMap<String,String>中，这种情况一般在,特殊情况下才会使用，例如jQuery easyUI的datagrid请求数据的时候需要使用到这种方式、小型项目只创建一个POJO类的话也可以使用这种接受方式


@RequestParam

@RequestParam这个一般就是在ajax里面没有声明contentType的时候，为默认的. 另外使用form提交数据的就只能使用@RequestParam接收。



@responseBody注解的使用

1、@responseBody注解的作用是将controller的方法返回的对象通过适当的转换器转换为指定的格式之后，写入到response对象的body区，通常用来返回JSON数据或者是XML
数据，需要注意的呢，在使用此注解之后不会再走试图处理器，而是直接将数据写入到输入流中，他的效果等同于通过response对象输出指定格式的数据。

2、@RequestMapping(“/login”)
　　@ResponseBody
　　public User login(User user){
　　　　return user;
　　}
　　User字段：userName pwd
　　那么在前台接收到的数据为：’{“userName”:”xxx”,”pwd”:”xxx”}’

　　效果等同于如下代码：
　　@RequestMapping(“/login”)
　　public void login(User user, HttpServletResponse response){
　　　response.getWriter.write(JSONObject.fromObject(user).toString());
　　}
---------------------

@RequestParam
用来处理Content-Type: 为 application/x-www-form-urlencoded编码的内容。（Http协议中，如果不指定Content-Type，则默认传递的参数就是application/x-www-form-urlencoded类型）

RequestParam可以接受简单类型的属性，也可以接受对象类型。
实质是将Request.getParameter() 中的Key-Value参数Map利用Spring的转化机制ConversionService配置，转化成参数接收对象或字段。

tip
在Content-Type: application/x-www-form-urlencoded的请求中，
get 方式中queryString的值，和post方式中 body data的值都会被Servlet接受到并转化到Request.getParameter()参数集中，所以@RequestParam可以获取的到。

@RequestBody
处理HttpEntity传递过来的数据，一般用来处理非Content-Type: application/x-www-form-urlencoded编码格式的数据。

GET请求中，因为没有HttpEntity，所以@RequestBody并不适用。
POST请求中，通过HttpEntity传递的参数，必须要在请求头中声明数据的类型Content-Type，SpringMVC通过使用HandlerAdapter 配置的HttpMessageConverters来解析HttpEntity中的数据，然后绑定到相应的bean上。
总结
在GET请求中，不能使用@RequestBody。
在POST请求，可以使用@RequestBody和@RequestParam，但是如果使用@RequestBody，对于参数转化的配置必须统一。
举个例子，在SpringMVC配置了HttpMessageConverters处理栈中，指定json转化的格式，如Date转成‘yyyy-MM-dd’,则参数接收对象包含的字段如果是Date类型，就只能让客户端传递年月日的格式，不能传时分秒。因为不同的接口，它的参数可能对时间参数有不同的格式要求，所以这样做会让客户端调用同事对参数的格式有点困惑，所以说扩展性不高。

如果使用@RequestParam来接受参数，可以在接受参数的model中设置@DateFormat指定所需要接受时间参数的格式。

另外，使用@RequestBody接受的参数是不会被Servlet转化统一放在request对象的Param参数集中，@RequestParam是可以的。

综上所述，一般情况下，推荐使用@RequestParam注解来接受Http请求参数。
---------------------
作者：xinluke
来源：CSDN
原文：https://blog.csdn.net/xinluke/article/details/52710706
版权声明：本文为博主原创文章，转载请附上博文链接！
